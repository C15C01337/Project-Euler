# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?


def count_divisors(n):
    """
    Returns the number of divisors of n.
    """
    count = 0
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            if i**2 == n:
                count += 1
            else:
                count += 2
    return count


def find_triangle_number_with_n_divisors(n):
    """
    Returns the first triangle number to have over n divisors.
    """
    i = 1
    while True:
        triangle_number = (i * (i + 1)) // 2
        divisors_count = count_divisors(triangle_number)
        if divisors_count > n:
            return triangle_number
        i += 1


# Find the first triangle number with over 500 divisors
result = find_triangle_number_with_n_divisors(500)

print(result)
